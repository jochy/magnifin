// Code generated by mockery v2.42.1. DO NOT EDIT.

package mocks

import (
	context "context"
	model "magnifin/internal/app/model"

	mock "github.com/stretchr/testify/mock"
)

// ConnectionRepository is an autogenerated mock type for the ConnectionRepository type
type ConnectionRepository struct {
	mock.Mock
}

type ConnectionRepository_Expecter struct {
	mock *mock.Mock
}

func (_m *ConnectionRepository) EXPECT() *ConnectionRepository_Expecter {
	return &ConnectionRepository_Expecter{mock: &_m.Mock}
}

// Create provides a mock function with given fields: ctx, connection
func (_m *ConnectionRepository) Create(ctx context.Context, connection *model.Connection) (*model.Connection, error) {
	ret := _m.Called(ctx, connection)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 *model.Connection
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *model.Connection) (*model.Connection, error)); ok {
		return rf(ctx, connection)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *model.Connection) *model.Connection); ok {
		r0 = rf(ctx, connection)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Connection)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *model.Connection) error); ok {
		r1 = rf(ctx, connection)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ConnectionRepository_Create_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Create'
type ConnectionRepository_Create_Call struct {
	*mock.Call
}

// Create is a helper method to define mock.On call
//   - ctx context.Context
//   - connection *model.Connection
func (_e *ConnectionRepository_Expecter) Create(ctx interface{}, connection interface{}) *ConnectionRepository_Create_Call {
	return &ConnectionRepository_Create_Call{Call: _e.mock.On("Create", ctx, connection)}
}

func (_c *ConnectionRepository_Create_Call) Run(run func(ctx context.Context, connection *model.Connection)) *ConnectionRepository_Create_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*model.Connection))
	})
	return _c
}

func (_c *ConnectionRepository_Create_Call) Return(_a0 *model.Connection, _a1 error) *ConnectionRepository_Create_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ConnectionRepository_Create_Call) RunAndReturn(run func(context.Context, *model.Connection) (*model.Connection, error)) *ConnectionRepository_Create_Call {
	_c.Call.Return(run)
	return _c
}

// GetByID provides a mock function with given fields: ctx, id
func (_m *ConnectionRepository) GetByID(ctx context.Context, id int32) (*model.Connection, error) {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for GetByID")
	}

	var r0 *model.Connection
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int32) (*model.Connection, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int32) *model.Connection); ok {
		r0 = rf(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Connection)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int32) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ConnectionRepository_GetByID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetByID'
type ConnectionRepository_GetByID_Call struct {
	*mock.Call
}

// GetByID is a helper method to define mock.On call
//   - ctx context.Context
//   - id int32
func (_e *ConnectionRepository_Expecter) GetByID(ctx interface{}, id interface{}) *ConnectionRepository_GetByID_Call {
	return &ConnectionRepository_GetByID_Call{Call: _e.mock.On("GetByID", ctx, id)}
}

func (_c *ConnectionRepository_GetByID_Call) Run(run func(ctx context.Context, id int32)) *ConnectionRepository_GetByID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int32))
	})
	return _c
}

func (_c *ConnectionRepository_GetByID_Call) Return(_a0 *model.Connection, _a1 error) *ConnectionRepository_GetByID_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ConnectionRepository_GetByID_Call) RunAndReturn(run func(context.Context, int32) (*model.Connection, error)) *ConnectionRepository_GetByID_Call {
	_c.Call.Return(run)
	return _c
}

// GetByProviderUserIDAndProviderConnectionID provides a mock function with given fields: ctx, providerUserID, providerConnectionID
func (_m *ConnectionRepository) GetByProviderUserIDAndProviderConnectionID(ctx context.Context, providerUserID int32, providerConnectionID string) (*model.Connection, error) {
	ret := _m.Called(ctx, providerUserID, providerConnectionID)

	if len(ret) == 0 {
		panic("no return value specified for GetByProviderUserIDAndProviderConnectionID")
	}

	var r0 *model.Connection
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int32, string) (*model.Connection, error)); ok {
		return rf(ctx, providerUserID, providerConnectionID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int32, string) *model.Connection); ok {
		r0 = rf(ctx, providerUserID, providerConnectionID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Connection)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int32, string) error); ok {
		r1 = rf(ctx, providerUserID, providerConnectionID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ConnectionRepository_GetByProviderUserIDAndProviderConnectionID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetByProviderUserIDAndProviderConnectionID'
type ConnectionRepository_GetByProviderUserIDAndProviderConnectionID_Call struct {
	*mock.Call
}

// GetByProviderUserIDAndProviderConnectionID is a helper method to define mock.On call
//   - ctx context.Context
//   - providerUserID int32
//   - providerConnectionID string
func (_e *ConnectionRepository_Expecter) GetByProviderUserIDAndProviderConnectionID(ctx interface{}, providerUserID interface{}, providerConnectionID interface{}) *ConnectionRepository_GetByProviderUserIDAndProviderConnectionID_Call {
	return &ConnectionRepository_GetByProviderUserIDAndProviderConnectionID_Call{Call: _e.mock.On("GetByProviderUserIDAndProviderConnectionID", ctx, providerUserID, providerConnectionID)}
}

func (_c *ConnectionRepository_GetByProviderUserIDAndProviderConnectionID_Call) Run(run func(ctx context.Context, providerUserID int32, providerConnectionID string)) *ConnectionRepository_GetByProviderUserIDAndProviderConnectionID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int32), args[2].(string))
	})
	return _c
}

func (_c *ConnectionRepository_GetByProviderUserIDAndProviderConnectionID_Call) Return(_a0 *model.Connection, _a1 error) *ConnectionRepository_GetByProviderUserIDAndProviderConnectionID_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ConnectionRepository_GetByProviderUserIDAndProviderConnectionID_Call) RunAndReturn(run func(context.Context, int32, string) (*model.Connection, error)) *ConnectionRepository_GetByProviderUserIDAndProviderConnectionID_Call {
	_c.Call.Return(run)
	return _c
}

// Update provides a mock function with given fields: ctx, connection
func (_m *ConnectionRepository) Update(ctx context.Context, connection *model.Connection) (*model.Connection, error) {
	ret := _m.Called(ctx, connection)

	if len(ret) == 0 {
		panic("no return value specified for Update")
	}

	var r0 *model.Connection
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *model.Connection) (*model.Connection, error)); ok {
		return rf(ctx, connection)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *model.Connection) *model.Connection); ok {
		r0 = rf(ctx, connection)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Connection)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *model.Connection) error); ok {
		r1 = rf(ctx, connection)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ConnectionRepository_Update_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Update'
type ConnectionRepository_Update_Call struct {
	*mock.Call
}

// Update is a helper method to define mock.On call
//   - ctx context.Context
//   - connection *model.Connection
func (_e *ConnectionRepository_Expecter) Update(ctx interface{}, connection interface{}) *ConnectionRepository_Update_Call {
	return &ConnectionRepository_Update_Call{Call: _e.mock.On("Update", ctx, connection)}
}

func (_c *ConnectionRepository_Update_Call) Run(run func(ctx context.Context, connection *model.Connection)) *ConnectionRepository_Update_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*model.Connection))
	})
	return _c
}

func (_c *ConnectionRepository_Update_Call) Return(_a0 *model.Connection, _a1 error) *ConnectionRepository_Update_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ConnectionRepository_Update_Call) RunAndReturn(run func(context.Context, *model.Connection) (*model.Connection, error)) *ConnectionRepository_Update_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateStatus provides a mock function with given fields: ctx, connectionID, status
func (_m *ConnectionRepository) UpdateStatus(ctx context.Context, connectionID int32, status model.ConnectionStatus) error {
	ret := _m.Called(ctx, connectionID, status)

	if len(ret) == 0 {
		panic("no return value specified for UpdateStatus")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, int32, model.ConnectionStatus) error); ok {
		r0 = rf(ctx, connectionID, status)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ConnectionRepository_UpdateStatus_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateStatus'
type ConnectionRepository_UpdateStatus_Call struct {
	*mock.Call
}

// UpdateStatus is a helper method to define mock.On call
//   - ctx context.Context
//   - connectionID int32
//   - status model.ConnectionStatus
func (_e *ConnectionRepository_Expecter) UpdateStatus(ctx interface{}, connectionID interface{}, status interface{}) *ConnectionRepository_UpdateStatus_Call {
	return &ConnectionRepository_UpdateStatus_Call{Call: _e.mock.On("UpdateStatus", ctx, connectionID, status)}
}

func (_c *ConnectionRepository_UpdateStatus_Call) Run(run func(ctx context.Context, connectionID int32, status model.ConnectionStatus)) *ConnectionRepository_UpdateStatus_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int32), args[2].(model.ConnectionStatus))
	})
	return _c
}

func (_c *ConnectionRepository_UpdateStatus_Call) Return(_a0 error) *ConnectionRepository_UpdateStatus_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ConnectionRepository_UpdateStatus_Call) RunAndReturn(run func(context.Context, int32, model.ConnectionStatus) error) *ConnectionRepository_UpdateStatus_Call {
	_c.Call.Return(run)
	return _c
}

// NewConnectionRepository creates a new instance of ConnectionRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewConnectionRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *ConnectionRepository {
	mock := &ConnectionRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
