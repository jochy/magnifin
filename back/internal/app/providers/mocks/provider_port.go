// Code generated by mockery v2.42.1. DO NOT EDIT.

package mocks

import (
	context "context"
	model "magnifin/internal/app/model"

	mock "github.com/stretchr/testify/mock"
)

// ProviderPort is an autogenerated mock type for the ProviderPort type
type ProviderPort struct {
	mock.Mock
}

type ProviderPort_Expecter struct {
	mock *mock.Mock
}

func (_m *ProviderPort) EXPECT() *ProviderPort_Expecter {
	return &ProviderPort_Expecter{mock: &_m.Mock}
}

// ListConnectors provides a mock function with given fields: ctx, provider
func (_m *ProviderPort) ListConnectors(ctx context.Context, provider *model.Provider) ([]model.Connector, error) {
	ret := _m.Called(ctx, provider)

	if len(ret) == 0 {
		panic("no return value specified for ListConnectors")
	}

	var r0 []model.Connector
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *model.Provider) ([]model.Connector, error)); ok {
		return rf(ctx, provider)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *model.Provider) []model.Connector); ok {
		r0 = rf(ctx, provider)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]model.Connector)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *model.Provider) error); ok {
		r1 = rf(ctx, provider)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ProviderPort_ListConnectors_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListConnectors'
type ProviderPort_ListConnectors_Call struct {
	*mock.Call
}

// ListConnectors is a helper method to define mock.On call
//   - ctx context.Context
//   - provider *model.Provider
func (_e *ProviderPort_Expecter) ListConnectors(ctx interface{}, provider interface{}) *ProviderPort_ListConnectors_Call {
	return &ProviderPort_ListConnectors_Call{Call: _e.mock.On("ListConnectors", ctx, provider)}
}

func (_c *ProviderPort_ListConnectors_Call) Run(run func(ctx context.Context, provider *model.Provider)) *ProviderPort_ListConnectors_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*model.Provider))
	})
	return _c
}

func (_c *ProviderPort_ListConnectors_Call) Return(_a0 []model.Connector, _a1 error) *ProviderPort_ListConnectors_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ProviderPort_ListConnectors_Call) RunAndReturn(run func(context.Context, *model.Provider) ([]model.Connector, error)) *ProviderPort_ListConnectors_Call {
	_c.Call.Return(run)
	return _c
}

// Name provides a mock function with given fields:
func (_m *ProviderPort) Name() string {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Name")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// ProviderPort_Name_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Name'
type ProviderPort_Name_Call struct {
	*mock.Call
}

// Name is a helper method to define mock.On call
func (_e *ProviderPort_Expecter) Name() *ProviderPort_Name_Call {
	return &ProviderPort_Name_Call{Call: _e.mock.On("Name")}
}

func (_c *ProviderPort_Name_Call) Run(run func()) *ProviderPort_Name_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *ProviderPort_Name_Call) Return(_a0 string) *ProviderPort_Name_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ProviderPort_Name_Call) RunAndReturn(run func() string) *ProviderPort_Name_Call {
	_c.Call.Return(run)
	return _c
}

// ValidateConfiguration provides a mock function with given fields: provider
func (_m *ProviderPort) ValidateConfiguration(provider *model.Provider) error {
	ret := _m.Called(provider)

	if len(ret) == 0 {
		panic("no return value specified for ValidateConfiguration")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*model.Provider) error); ok {
		r0 = rf(provider)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ProviderPort_ValidateConfiguration_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ValidateConfiguration'
type ProviderPort_ValidateConfiguration_Call struct {
	*mock.Call
}

// ValidateConfiguration is a helper method to define mock.On call
//   - provider *model.Provider
func (_e *ProviderPort_Expecter) ValidateConfiguration(provider interface{}) *ProviderPort_ValidateConfiguration_Call {
	return &ProviderPort_ValidateConfiguration_Call{Call: _e.mock.On("ValidateConfiguration", provider)}
}

func (_c *ProviderPort_ValidateConfiguration_Call) Run(run func(provider *model.Provider)) *ProviderPort_ValidateConfiguration_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*model.Provider))
	})
	return _c
}

func (_c *ProviderPort_ValidateConfiguration_Call) Return(_a0 error) *ProviderPort_ValidateConfiguration_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ProviderPort_ValidateConfiguration_Call) RunAndReturn(run func(*model.Provider) error) *ProviderPort_ValidateConfiguration_Call {
	_c.Call.Return(run)
	return _c
}

// NewProviderPort creates a new instance of ProviderPort. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewProviderPort(t interface {
	mock.TestingT
	Cleanup(func())
}) *ProviderPort {
	mock := &ProviderPort{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
