// Code generated by mockery v2.42.1. DO NOT EDIT.

package mocks

import (
	context "context"
	model "magnifin/internal/app/model"

	mock "github.com/stretchr/testify/mock"
)

// RedirectSessionsRepository is an autogenerated mock type for the RedirectSessionsRepository type
type RedirectSessionsRepository struct {
	mock.Mock
}

type RedirectSessionsRepository_Expecter struct {
	mock *mock.Mock
}

func (_m *RedirectSessionsRepository) EXPECT() *RedirectSessionsRepository_Expecter {
	return &RedirectSessionsRepository_Expecter{mock: &_m.Mock}
}

// GetRedirectSessionByID provides a mock function with given fields: ctx, id
func (_m *RedirectSessionsRepository) GetRedirectSessionByID(ctx context.Context, id string) (*model.RedirectSession, error) {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for GetRedirectSessionByID")
	}

	var r0 *model.RedirectSession
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*model.RedirectSession, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *model.RedirectSession); ok {
		r0 = rf(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.RedirectSession)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RedirectSessionsRepository_GetRedirectSessionByID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetRedirectSessionByID'
type RedirectSessionsRepository_GetRedirectSessionByID_Call struct {
	*mock.Call
}

// GetRedirectSessionByID is a helper method to define mock.On call
//   - ctx context.Context
//   - id string
func (_e *RedirectSessionsRepository_Expecter) GetRedirectSessionByID(ctx interface{}, id interface{}) *RedirectSessionsRepository_GetRedirectSessionByID_Call {
	return &RedirectSessionsRepository_GetRedirectSessionByID_Call{Call: _e.mock.On("GetRedirectSessionByID", ctx, id)}
}

func (_c *RedirectSessionsRepository_GetRedirectSessionByID_Call) Run(run func(ctx context.Context, id string)) *RedirectSessionsRepository_GetRedirectSessionByID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *RedirectSessionsRepository_GetRedirectSessionByID_Call) Return(_a0 *model.RedirectSession, _a1 error) *RedirectSessionsRepository_GetRedirectSessionByID_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *RedirectSessionsRepository_GetRedirectSessionByID_Call) RunAndReturn(run func(context.Context, string) (*model.RedirectSession, error)) *RedirectSessionsRepository_GetRedirectSessionByID_Call {
	_c.Call.Return(run)
	return _c
}

// SaveRedirectSession provides a mock function with given fields: ctx, session
func (_m *RedirectSessionsRepository) SaveRedirectSession(ctx context.Context, session model.RedirectSession) error {
	ret := _m.Called(ctx, session)

	if len(ret) == 0 {
		panic("no return value specified for SaveRedirectSession")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, model.RedirectSession) error); ok {
		r0 = rf(ctx, session)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// RedirectSessionsRepository_SaveRedirectSession_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SaveRedirectSession'
type RedirectSessionsRepository_SaveRedirectSession_Call struct {
	*mock.Call
}

// SaveRedirectSession is a helper method to define mock.On call
//   - ctx context.Context
//   - session model.RedirectSession
func (_e *RedirectSessionsRepository_Expecter) SaveRedirectSession(ctx interface{}, session interface{}) *RedirectSessionsRepository_SaveRedirectSession_Call {
	return &RedirectSessionsRepository_SaveRedirectSession_Call{Call: _e.mock.On("SaveRedirectSession", ctx, session)}
}

func (_c *RedirectSessionsRepository_SaveRedirectSession_Call) Run(run func(ctx context.Context, session model.RedirectSession)) *RedirectSessionsRepository_SaveRedirectSession_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(model.RedirectSession))
	})
	return _c
}

func (_c *RedirectSessionsRepository_SaveRedirectSession_Call) Return(_a0 error) *RedirectSessionsRepository_SaveRedirectSession_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *RedirectSessionsRepository_SaveRedirectSession_Call) RunAndReturn(run func(context.Context, model.RedirectSession) error) *RedirectSessionsRepository_SaveRedirectSession_Call {
	_c.Call.Return(run)
	return _c
}

// NewRedirectSessionsRepository creates a new instance of RedirectSessionsRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewRedirectSessionsRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *RedirectSessionsRepository {
	mock := &RedirectSessionsRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
