// Code generated by mockery v2.42.1. DO NOT EDIT.

package mocks

import (
	context "context"
	model "magnifin/internal/app/model"

	mock "github.com/stretchr/testify/mock"
)

// TransactionRepository is an autogenerated mock type for the TransactionRepository type
type TransactionRepository struct {
	mock.Mock
}

type TransactionRepository_Expecter struct {
	mock *mock.Mock
}

func (_m *TransactionRepository) EXPECT() *TransactionRepository_Expecter {
	return &TransactionRepository_Expecter{mock: &_m.Mock}
}

// Create provides a mock function with given fields: ctx, transaction
func (_m *TransactionRepository) Create(ctx context.Context, transaction *model.Transaction) (*model.Transaction, error) {
	ret := _m.Called(ctx, transaction)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 *model.Transaction
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *model.Transaction) (*model.Transaction, error)); ok {
		return rf(ctx, transaction)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *model.Transaction) *model.Transaction); ok {
		r0 = rf(ctx, transaction)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Transaction)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *model.Transaction) error); ok {
		r1 = rf(ctx, transaction)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// TransactionRepository_Create_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Create'
type TransactionRepository_Create_Call struct {
	*mock.Call
}

// Create is a helper method to define mock.On call
//   - ctx context.Context
//   - transaction *model.Transaction
func (_e *TransactionRepository_Expecter) Create(ctx interface{}, transaction interface{}) *TransactionRepository_Create_Call {
	return &TransactionRepository_Create_Call{Call: _e.mock.On("Create", ctx, transaction)}
}

func (_c *TransactionRepository_Create_Call) Run(run func(ctx context.Context, transaction *model.Transaction)) *TransactionRepository_Create_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*model.Transaction))
	})
	return _c
}

func (_c *TransactionRepository_Create_Call) Return(_a0 *model.Transaction, _a1 error) *TransactionRepository_Create_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *TransactionRepository_Create_Call) RunAndReturn(run func(context.Context, *model.Transaction) (*model.Transaction, error)) *TransactionRepository_Create_Call {
	_c.Call.Return(run)
	return _c
}

// GetByAccountIDAndProviderTransactionID provides a mock function with given fields: ctx, accountID, providerTransactionID
func (_m *TransactionRepository) GetByAccountIDAndProviderTransactionID(ctx context.Context, accountID int32, providerTransactionID string) (*model.Transaction, error) {
	ret := _m.Called(ctx, accountID, providerTransactionID)

	if len(ret) == 0 {
		panic("no return value specified for GetByAccountIDAndProviderTransactionID")
	}

	var r0 *model.Transaction
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int32, string) (*model.Transaction, error)); ok {
		return rf(ctx, accountID, providerTransactionID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int32, string) *model.Transaction); ok {
		r0 = rf(ctx, accountID, providerTransactionID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Transaction)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int32, string) error); ok {
		r1 = rf(ctx, accountID, providerTransactionID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// TransactionRepository_GetByAccountIDAndProviderTransactionID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetByAccountIDAndProviderTransactionID'
type TransactionRepository_GetByAccountIDAndProviderTransactionID_Call struct {
	*mock.Call
}

// GetByAccountIDAndProviderTransactionID is a helper method to define mock.On call
//   - ctx context.Context
//   - accountID int32
//   - providerTransactionID string
func (_e *TransactionRepository_Expecter) GetByAccountIDAndProviderTransactionID(ctx interface{}, accountID interface{}, providerTransactionID interface{}) *TransactionRepository_GetByAccountIDAndProviderTransactionID_Call {
	return &TransactionRepository_GetByAccountIDAndProviderTransactionID_Call{Call: _e.mock.On("GetByAccountIDAndProviderTransactionID", ctx, accountID, providerTransactionID)}
}

func (_c *TransactionRepository_GetByAccountIDAndProviderTransactionID_Call) Run(run func(ctx context.Context, accountID int32, providerTransactionID string)) *TransactionRepository_GetByAccountIDAndProviderTransactionID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int32), args[2].(string))
	})
	return _c
}

func (_c *TransactionRepository_GetByAccountIDAndProviderTransactionID_Call) Return(_a0 *model.Transaction, _a1 error) *TransactionRepository_GetByAccountIDAndProviderTransactionID_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *TransactionRepository_GetByAccountIDAndProviderTransactionID_Call) RunAndReturn(run func(context.Context, int32, string) (*model.Transaction, error)) *TransactionRepository_GetByAccountIDAndProviderTransactionID_Call {
	_c.Call.Return(run)
	return _c
}

// Update provides a mock function with given fields: ctx, transaction
func (_m *TransactionRepository) Update(ctx context.Context, transaction *model.Transaction) (*model.Transaction, error) {
	ret := _m.Called(ctx, transaction)

	if len(ret) == 0 {
		panic("no return value specified for Update")
	}

	var r0 *model.Transaction
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *model.Transaction) (*model.Transaction, error)); ok {
		return rf(ctx, transaction)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *model.Transaction) *model.Transaction); ok {
		r0 = rf(ctx, transaction)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Transaction)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *model.Transaction) error); ok {
		r1 = rf(ctx, transaction)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// TransactionRepository_Update_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Update'
type TransactionRepository_Update_Call struct {
	*mock.Call
}

// Update is a helper method to define mock.On call
//   - ctx context.Context
//   - transaction *model.Transaction
func (_e *TransactionRepository_Expecter) Update(ctx interface{}, transaction interface{}) *TransactionRepository_Update_Call {
	return &TransactionRepository_Update_Call{Call: _e.mock.On("Update", ctx, transaction)}
}

func (_c *TransactionRepository_Update_Call) Run(run func(ctx context.Context, transaction *model.Transaction)) *TransactionRepository_Update_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*model.Transaction))
	})
	return _c
}

func (_c *TransactionRepository_Update_Call) Return(_a0 *model.Transaction, _a1 error) *TransactionRepository_Update_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *TransactionRepository_Update_Call) RunAndReturn(run func(context.Context, *model.Transaction) (*model.Transaction, error)) *TransactionRepository_Update_Call {
	_c.Call.Return(run)
	return _c
}

// NewTransactionRepository creates a new instance of TransactionRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewTransactionRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *TransactionRepository {
	mock := &TransactionRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
