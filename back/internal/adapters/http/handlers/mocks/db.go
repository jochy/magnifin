// Code generated by mockery v2.42.1. DO NOT EDIT.

package mocks

import mock "github.com/stretchr/testify/mock"

// Db is an autogenerated mock type for the Db type
type Db struct {
	mock.Mock
}

type Db_Expecter struct {
	mock *mock.Mock
}

func (_m *Db) EXPECT() *Db_Expecter {
	return &Db_Expecter{mock: &_m.Mock}
}

// Health provides a mock function with given fields:
func (_m *Db) Health() map[string]string {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Health")
	}

	var r0 map[string]string
	if rf, ok := ret.Get(0).(func() map[string]string); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[string]string)
		}
	}

	return r0
}

// Db_Health_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Health'
type Db_Health_Call struct {
	*mock.Call
}

// Health is a helper method to define mock.On call
func (_e *Db_Expecter) Health() *Db_Health_Call {
	return &Db_Health_Call{Call: _e.mock.On("Health")}
}

func (_c *Db_Health_Call) Run(run func()) *Db_Health_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Db_Health_Call) Return(_a0 map[string]string) *Db_Health_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Db_Health_Call) RunAndReturn(run func() map[string]string) *Db_Health_Call {
	_c.Call.Return(run)
	return _c
}

// NewDb creates a new instance of Db. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewDb(t interface {
	mock.TestingT
	Cleanup(func())
}) *Db {
	mock := &Db{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
