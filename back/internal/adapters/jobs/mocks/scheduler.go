// Code generated by mockery v2.42.1. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"

	river "github.com/riverqueue/river"
)

// Scheduler is an autogenerated mock type for the Scheduler type
type Scheduler struct {
	mock.Mock
}

type Scheduler_Expecter struct {
	mock *mock.Mock
}

func (_m *Scheduler) EXPECT() *Scheduler_Expecter {
	return &Scheduler_Expecter{mock: &_m.Mock}
}

// Trigger provides a mock function with given fields: ctx, job
func (_m *Scheduler) Trigger(ctx context.Context, job river.JobArgs) error {
	ret := _m.Called(ctx, job)

	if len(ret) == 0 {
		panic("no return value specified for Trigger")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, river.JobArgs) error); ok {
		r0 = rf(ctx, job)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Scheduler_Trigger_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Trigger'
type Scheduler_Trigger_Call struct {
	*mock.Call
}

// Trigger is a helper method to define mock.On call
//   - ctx context.Context
//   - job river.JobArgs
func (_e *Scheduler_Expecter) Trigger(ctx interface{}, job interface{}) *Scheduler_Trigger_Call {
	return &Scheduler_Trigger_Call{Call: _e.mock.On("Trigger", ctx, job)}
}

func (_c *Scheduler_Trigger_Call) Run(run func(ctx context.Context, job river.JobArgs)) *Scheduler_Trigger_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(river.JobArgs))
	})
	return _c
}

func (_c *Scheduler_Trigger_Call) Return(_a0 error) *Scheduler_Trigger_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Scheduler_Trigger_Call) RunAndReturn(run func(context.Context, river.JobArgs) error) *Scheduler_Trigger_Call {
	_c.Call.Return(run)
	return _c
}

// NewScheduler creates a new instance of Scheduler. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewScheduler(t interface {
	mock.TestingT
	Cleanup(func())
}) *Scheduler {
	mock := &Scheduler{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
