// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: queries.sql

package database

import (
	"context"
	"database/sql"
)

const createProviderUser = `-- name: CreateProviderUser :one
insert into provider_users (provider_id, user_id, provider_user_id)
values ($1, $2, $3)
returning id, provider_id, provider_user_id, user_id, created_at, updated_at, deleted_at
`

type CreateProviderUserParams struct {
	ProviderID     int32  `db:"provider_id"`
	UserID         int32  `db:"user_id"`
	ProviderUserID string `db:"provider_user_id"`
}

func (q *Queries) CreateProviderUser(ctx context.Context, arg CreateProviderUserParams) (ProviderUser, error) {
	row := q.db.QueryRowContext(ctx, createProviderUser, arg.ProviderID, arg.UserID, arg.ProviderUserID)
	var i ProviderUser
	err := row.Scan(
		&i.ID,
		&i.ProviderID,
		&i.ProviderUserID,
		&i.UserID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return i, err
}

const createUser = `-- name: CreateUser :one
insert into users (username, hashed_password)
values ($1, $2)
returning id, username, hashed_password, created_at, updated_at, deleted_at
`

type CreateUserParams struct {
	Username       string `db:"username"`
	HashedPassword string `db:"hashed_password"`
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (User, error) {
	row := q.db.QueryRowContext(ctx, createUser, arg.Username, arg.HashedPassword)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.HashedPassword,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return i, err
}

const fuzzySearchConnectorsByName = `-- name: FuzzySearchConnectorsByName :many
select connectors.id, connectors.name, connectors.logo_url, connectors.provider_connector_id, connectors.provider_id, connectors.created_at, connectors.updated_at, connectors.deleted_at
from connectors
         inner join providers on connectors.provider_id = providers.id
where connectors.name % $1
  and connectors.deleted_at is null
  and providers.deleted_at is null
  and providers.enabled = true
`

func (q *Queries) FuzzySearchConnectorsByName(ctx context.Context, name string) ([]Connector, error) {
	rows, err := q.db.QueryContext(ctx, fuzzySearchConnectorsByName, name)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Connector{}
	for rows.Next() {
		var i Connector
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.LogoUrl,
			&i.ProviderConnectorID,
			&i.ProviderID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.DeletedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getConnectorByID = `-- name: GetConnectorByID :one
select id, name, logo_url, provider_connector_id, provider_id, created_at, updated_at, deleted_at
from connectors
where id = $1
  and deleted_at is null
`

func (q *Queries) GetConnectorByID(ctx context.Context, id int32) (Connector, error) {
	row := q.db.QueryRowContext(ctx, getConnectorByID, id)
	var i Connector
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.LogoUrl,
		&i.ProviderConnectorID,
		&i.ProviderID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return i, err
}

const getProviderByID = `-- name: GetProviderByID :one
select id, name, access_key, secret, enabled, created_at, updated_at, deleted_at
from providers
where id = $1
  and deleted_at is null
`

func (q *Queries) GetProviderByID(ctx context.Context, id int32) (Provider, error) {
	row := q.db.QueryRowContext(ctx, getProviderByID, id)
	var i Provider
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.AccessKey,
		&i.Secret,
		&i.Enabled,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return i, err
}

const getProviderByName = `-- name: GetProviderByName :one
select id, name, access_key, secret, enabled, created_at, updated_at, deleted_at
from providers
where name = $1
  and deleted_at is null
`

func (q *Queries) GetProviderByName(ctx context.Context, name string) (Provider, error) {
	row := q.db.QueryRowContext(ctx, getProviderByName, name)
	var i Provider
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.AccessKey,
		&i.Secret,
		&i.Enabled,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return i, err
}

const getProviderUserByProviderIDAndUserID = `-- name: GetProviderUserByProviderIDAndUserID :one
select id, provider_id, provider_user_id, user_id, created_at, updated_at, deleted_at
from provider_users
where provider_id = $1
  and user_id = $2
  and deleted_at is null
`

type GetProviderUserByProviderIDAndUserIDParams struct {
	ProviderID int32 `db:"provider_id"`
	UserID     int32 `db:"user_id"`
}

func (q *Queries) GetProviderUserByProviderIDAndUserID(ctx context.Context, arg GetProviderUserByProviderIDAndUserIDParams) (ProviderUser, error) {
	row := q.db.QueryRowContext(ctx, getProviderUserByProviderIDAndUserID, arg.ProviderID, arg.UserID)
	var i ProviderUser
	err := row.Scan(
		&i.ID,
		&i.ProviderID,
		&i.ProviderUserID,
		&i.UserID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return i, err
}

const getUserByID = `-- name: GetUserByID :one
select id, username, hashed_password, created_at, updated_at, deleted_at
from users
where id = $1
  and deleted_at is null
`

func (q *Queries) GetUserByID(ctx context.Context, id int32) (User, error) {
	row := q.db.QueryRowContext(ctx, getUserByID, id)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.HashedPassword,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return i, err
}

const getUserByUsernameAndHashedPassword = `-- name: GetUserByUsernameAndHashedPassword :one
select id, username, hashed_password, created_at, updated_at, deleted_at
from users
where username = $1
  and hashed_password = $2
  and deleted_at is null
`

type GetUserByUsernameAndHashedPasswordParams struct {
	Username       string `db:"username"`
	HashedPassword string `db:"hashed_password"`
}

func (q *Queries) GetUserByUsernameAndHashedPassword(ctx context.Context, arg GetUserByUsernameAndHashedPasswordParams) (User, error) {
	row := q.db.QueryRowContext(ctx, getUserByUsernameAndHashedPassword, arg.Username, arg.HashedPassword)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.HashedPassword,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return i, err
}

const likeSearchConnectorsByName = `-- name: LikeSearchConnectorsByName :many
select connectors.id, connectors.name, connectors.logo_url, connectors.provider_connector_id, connectors.provider_id, connectors.created_at, connectors.updated_at, connectors.deleted_at
from connectors
         inner join providers on connectors.provider_id = providers.id
where connectors.name ilike $1
  and connectors.deleted_at is null
  and providers.deleted_at is null
  and providers.enabled = true
`

func (q *Queries) LikeSearchConnectorsByName(ctx context.Context, name string) ([]Connector, error) {
	rows, err := q.db.QueryContext(ctx, likeSearchConnectorsByName, name)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Connector{}
	for rows.Next() {
		var i Connector
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.LogoUrl,
			&i.ProviderConnectorID,
			&i.ProviderID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.DeletedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listProviders = `-- name: ListProviders :many
select id, name, access_key, secret, enabled, created_at, updated_at, deleted_at
from providers
where deleted_at is null
`

func (q *Queries) ListProviders(ctx context.Context) ([]Provider, error) {
	rows, err := q.db.QueryContext(ctx, listProviders)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Provider{}
	for rows.Next() {
		var i Provider
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.AccessKey,
			&i.Secret,
			&i.Enabled,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.DeletedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateProvider = `-- name: UpdateProvider :one
update providers
set name       = $2,
    access_key = $3,
    secret     = $4,
    enabled    = $5,
    updated_at = now()
where id = $1
returning id, name, access_key, secret, enabled, created_at, updated_at, deleted_at
`

type UpdateProviderParams struct {
	ID        int32          `db:"id"`
	Name      string         `db:"name"`
	AccessKey sql.NullString `db:"access_key"`
	Secret    sql.NullString `db:"secret"`
	Enabled   bool           `db:"enabled"`
}

func (q *Queries) UpdateProvider(ctx context.Context, arg UpdateProviderParams) (Provider, error) {
	row := q.db.QueryRowContext(ctx, updateProvider,
		arg.ID,
		arg.Name,
		arg.AccessKey,
		arg.Secret,
		arg.Enabled,
	)
	var i Provider
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.AccessKey,
		&i.Secret,
		&i.Enabled,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return i, err
}

const updateUser = `-- name: UpdateUser :one
update users
set hashed_password = $2,
    updated_at      = now()
where id = $1
returning id, username, hashed_password, created_at, updated_at, deleted_at
`

type UpdateUserParams struct {
	ID             int32  `db:"id"`
	HashedPassword string `db:"hashed_password"`
}

func (q *Queries) UpdateUser(ctx context.Context, arg UpdateUserParams) (User, error) {
	row := q.db.QueryRowContext(ctx, updateUser, arg.ID, arg.HashedPassword)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.HashedPassword,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return i, err
}

const upsertConnector = `-- name: UpsertConnector :one
insert into connectors (name, logo_url, provider_connector_id, provider_id)
values ($1, $2, $3, $4)
on conflict (provider_id, provider_connector_id) do update
    set name     = excluded.name,
        logo_url = excluded.logo_url
returning id, name, logo_url, provider_connector_id, provider_id, created_at, updated_at, deleted_at
`

type UpsertConnectorParams struct {
	Name                string         `db:"name"`
	LogoUrl             sql.NullString `db:"logo_url"`
	ProviderConnectorID string         `db:"provider_connector_id"`
	ProviderID          int32          `db:"provider_id"`
}

func (q *Queries) UpsertConnector(ctx context.Context, arg UpsertConnectorParams) (Connector, error) {
	row := q.db.QueryRowContext(ctx, upsertConnector,
		arg.Name,
		arg.LogoUrl,
		arg.ProviderConnectorID,
		arg.ProviderID,
	)
	var i Connector
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.LogoUrl,
		&i.ProviderConnectorID,
		&i.ProviderID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return i, err
}
