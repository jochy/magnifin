// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: queries.sql

package database

import (
	"context"
	"database/sql"
)

const createUser = `-- name: CreateUser :one
insert into users (username, hashed_password)
values ($1, $2)
returning id, username, hashed_password, created_at, updated_at, deleted_at
`

type CreateUserParams struct {
	Username       string `db:"username"`
	HashedPassword string `db:"hashed_password"`
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (User, error) {
	row := q.db.QueryRowContext(ctx, createUser, arg.Username, arg.HashedPassword)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.HashedPassword,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return i, err
}

const getUserByID = `-- name: GetUserByID :one
select id, username, hashed_password, created_at, updated_at, deleted_at
from users
where id = $1
  and deleted_at is null
`

func (q *Queries) GetUserByID(ctx context.Context, id int32) (User, error) {
	row := q.db.QueryRowContext(ctx, getUserByID, id)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.HashedPassword,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return i, err
}

const getUserByUsernameAndHashedPassword = `-- name: GetUserByUsernameAndHashedPassword :one
select id, username, hashed_password, created_at, updated_at, deleted_at
from users
where username = $1
  and hashed_password = $2
  and deleted_at is null
`

type GetUserByUsernameAndHashedPasswordParams struct {
	Username       string `db:"username"`
	HashedPassword string `db:"hashed_password"`
}

func (q *Queries) GetUserByUsernameAndHashedPassword(ctx context.Context, arg GetUserByUsernameAndHashedPasswordParams) (User, error) {
	row := q.db.QueryRowContext(ctx, getUserByUsernameAndHashedPassword, arg.Username, arg.HashedPassword)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.HashedPassword,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return i, err
}

const listProviders = `-- name: ListProviders :many
select id, name, access_key, secret, enabled, created_at, updated_at, deleted_at
from providers
where deleted_at is null
`

func (q *Queries) ListProviders(ctx context.Context) ([]Provider, error) {
	rows, err := q.db.QueryContext(ctx, listProviders)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Provider{}
	for rows.Next() {
		var i Provider
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.AccessKey,
			&i.Secret,
			&i.Enabled,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.DeletedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateProvider = `-- name: UpdateProvider :one
update providers
set name       = $2,
    access_key = $3,
    secret     = $4,
    enabled    = $5,
    updated_at = now()
where id = $1
returning id, name, access_key, secret, enabled, created_at, updated_at, deleted_at
`

type UpdateProviderParams struct {
	ID        int32          `db:"id"`
	Name      string         `db:"name"`
	AccessKey sql.NullString `db:"access_key"`
	Secret    sql.NullString `db:"secret"`
	Enabled   bool           `db:"enabled"`
}

func (q *Queries) UpdateProvider(ctx context.Context, arg UpdateProviderParams) (Provider, error) {
	row := q.db.QueryRowContext(ctx, updateProvider,
		arg.ID,
		arg.Name,
		arg.AccessKey,
		arg.Secret,
		arg.Enabled,
	)
	var i Provider
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.AccessKey,
		&i.Secret,
		&i.Enabled,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return i, err
}

const updateUser = `-- name: UpdateUser :one
update users
set hashed_password = $2,
    updated_at      = now()
where id = $1
returning id, username, hashed_password, created_at, updated_at, deleted_at
`

type UpdateUserParams struct {
	ID             int32  `db:"id"`
	HashedPassword string `db:"hashed_password"`
}

func (q *Queries) UpdateUser(ctx context.Context, arg UpdateUserParams) (User, error) {
	row := q.db.QueryRowContext(ctx, updateUser, arg.ID, arg.HashedPassword)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.HashedPassword,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return i, err
}
