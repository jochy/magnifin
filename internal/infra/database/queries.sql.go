// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: queries.sql

package database

import (
	"context"
)

const createUser = `-- name: CreateUser :one
insert into users (username, hashed_password)
values ($1, $2)
returning id, username, hashed_password, created_at, updated_at, deleted_at
`

type CreateUserParams struct {
	Username       string `db:"username"`
	HashedPassword string `db:"hashed_password"`
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (User, error) {
	row := q.db.QueryRowContext(ctx, createUser, arg.Username, arg.HashedPassword)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.HashedPassword,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return i, err
}

const getUserByID = `-- name: GetUserByID :one
select id, username, hashed_password, created_at, updated_at, deleted_at
from users
where id = $1
  and deleted_at is null
`

func (q *Queries) GetUserByID(ctx context.Context, id int32) (User, error) {
	row := q.db.QueryRowContext(ctx, getUserByID, id)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.HashedPassword,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return i, err
}

const getUserByUsernameAndHashedPassword = `-- name: GetUserByUsernameAndHashedPassword :one
select id, username, hashed_password, created_at, updated_at, deleted_at
from users
where username = $1
  and hashed_password = $2
  and deleted_at is null
`

type GetUserByUsernameAndHashedPasswordParams struct {
	Username       string `db:"username"`
	HashedPassword string `db:"hashed_password"`
}

func (q *Queries) GetUserByUsernameAndHashedPassword(ctx context.Context, arg GetUserByUsernameAndHashedPasswordParams) (User, error) {
	row := q.db.QueryRowContext(ctx, getUserByUsernameAndHashedPassword, arg.Username, arg.HashedPassword)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.HashedPassword,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return i, err
}
