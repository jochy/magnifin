// Code generated by mockery v2.42.1. DO NOT EDIT.

package mocks

import (
	context "context"
	database "magnifin/internal/infra/database"

	mock "github.com/stretchr/testify/mock"
)

// Querier is an autogenerated mock type for the Querier type
type Querier struct {
	mock.Mock
}

type Querier_Expecter struct {
	mock *mock.Mock
}

func (_m *Querier) EXPECT() *Querier_Expecter {
	return &Querier_Expecter{mock: &_m.Mock}
}

// CreateUser provides a mock function with given fields: ctx, arg
func (_m *Querier) CreateUser(ctx context.Context, arg database.CreateUserParams) (database.User, error) {
	ret := _m.Called(ctx, arg)

	if len(ret) == 0 {
		panic("no return value specified for CreateUser")
	}

	var r0 database.User
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, database.CreateUserParams) (database.User, error)); ok {
		return rf(ctx, arg)
	}
	if rf, ok := ret.Get(0).(func(context.Context, database.CreateUserParams) database.User); ok {
		r0 = rf(ctx, arg)
	} else {
		r0 = ret.Get(0).(database.User)
	}

	if rf, ok := ret.Get(1).(func(context.Context, database.CreateUserParams) error); ok {
		r1 = rf(ctx, arg)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Querier_CreateUser_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateUser'
type Querier_CreateUser_Call struct {
	*mock.Call
}

// CreateUser is a helper method to define mock.On call
//   - ctx context.Context
//   - arg database.CreateUserParams
func (_e *Querier_Expecter) CreateUser(ctx interface{}, arg interface{}) *Querier_CreateUser_Call {
	return &Querier_CreateUser_Call{Call: _e.mock.On("CreateUser", ctx, arg)}
}

func (_c *Querier_CreateUser_Call) Run(run func(ctx context.Context, arg database.CreateUserParams)) *Querier_CreateUser_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(database.CreateUserParams))
	})
	return _c
}

func (_c *Querier_CreateUser_Call) Return(_a0 database.User, _a1 error) *Querier_CreateUser_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Querier_CreateUser_Call) RunAndReturn(run func(context.Context, database.CreateUserParams) (database.User, error)) *Querier_CreateUser_Call {
	_c.Call.Return(run)
	return _c
}

// GetUserByID provides a mock function with given fields: ctx, id
func (_m *Querier) GetUserByID(ctx context.Context, id int32) (database.User, error) {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for GetUserByID")
	}

	var r0 database.User
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int32) (database.User, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int32) database.User); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Get(0).(database.User)
	}

	if rf, ok := ret.Get(1).(func(context.Context, int32) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Querier_GetUserByID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetUserByID'
type Querier_GetUserByID_Call struct {
	*mock.Call
}

// GetUserByID is a helper method to define mock.On call
//   - ctx context.Context
//   - id int32
func (_e *Querier_Expecter) GetUserByID(ctx interface{}, id interface{}) *Querier_GetUserByID_Call {
	return &Querier_GetUserByID_Call{Call: _e.mock.On("GetUserByID", ctx, id)}
}

func (_c *Querier_GetUserByID_Call) Run(run func(ctx context.Context, id int32)) *Querier_GetUserByID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int32))
	})
	return _c
}

func (_c *Querier_GetUserByID_Call) Return(_a0 database.User, _a1 error) *Querier_GetUserByID_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Querier_GetUserByID_Call) RunAndReturn(run func(context.Context, int32) (database.User, error)) *Querier_GetUserByID_Call {
	_c.Call.Return(run)
	return _c
}

// GetUserByUsernameAndHashedPassword provides a mock function with given fields: ctx, arg
func (_m *Querier) GetUserByUsernameAndHashedPassword(ctx context.Context, arg database.GetUserByUsernameAndHashedPasswordParams) (database.User, error) {
	ret := _m.Called(ctx, arg)

	if len(ret) == 0 {
		panic("no return value specified for GetUserByUsernameAndHashedPassword")
	}

	var r0 database.User
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, database.GetUserByUsernameAndHashedPasswordParams) (database.User, error)); ok {
		return rf(ctx, arg)
	}
	if rf, ok := ret.Get(0).(func(context.Context, database.GetUserByUsernameAndHashedPasswordParams) database.User); ok {
		r0 = rf(ctx, arg)
	} else {
		r0 = ret.Get(0).(database.User)
	}

	if rf, ok := ret.Get(1).(func(context.Context, database.GetUserByUsernameAndHashedPasswordParams) error); ok {
		r1 = rf(ctx, arg)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Querier_GetUserByUsernameAndHashedPassword_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetUserByUsernameAndHashedPassword'
type Querier_GetUserByUsernameAndHashedPassword_Call struct {
	*mock.Call
}

// GetUserByUsernameAndHashedPassword is a helper method to define mock.On call
//   - ctx context.Context
//   - arg database.GetUserByUsernameAndHashedPasswordParams
func (_e *Querier_Expecter) GetUserByUsernameAndHashedPassword(ctx interface{}, arg interface{}) *Querier_GetUserByUsernameAndHashedPassword_Call {
	return &Querier_GetUserByUsernameAndHashedPassword_Call{Call: _e.mock.On("GetUserByUsernameAndHashedPassword", ctx, arg)}
}

func (_c *Querier_GetUserByUsernameAndHashedPassword_Call) Run(run func(ctx context.Context, arg database.GetUserByUsernameAndHashedPasswordParams)) *Querier_GetUserByUsernameAndHashedPassword_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(database.GetUserByUsernameAndHashedPasswordParams))
	})
	return _c
}

func (_c *Querier_GetUserByUsernameAndHashedPassword_Call) Return(_a0 database.User, _a1 error) *Querier_GetUserByUsernameAndHashedPassword_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Querier_GetUserByUsernameAndHashedPassword_Call) RunAndReturn(run func(context.Context, database.GetUserByUsernameAndHashedPasswordParams) (database.User, error)) *Querier_GetUserByUsernameAndHashedPassword_Call {
	_c.Call.Return(run)
	return _c
}

// NewQuerier creates a new instance of Querier. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewQuerier(t interface {
	mock.TestingT
	Cleanup(func())
}) *Querier {
	mock := &Querier{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
