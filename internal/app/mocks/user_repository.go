// Code generated by mockery v2.42.1. DO NOT EDIT.

package mocks

import (
	context "context"
	model "magnifin/internal/app/model"

	mock "github.com/stretchr/testify/mock"
)

// UserRepository is an autogenerated mock type for the UserRepository type
type UserRepository struct {
	mock.Mock
}

type UserRepository_Expecter struct {
	mock *mock.Mock
}

func (_m *UserRepository) EXPECT() *UserRepository_Expecter {
	return &UserRepository_Expecter{mock: &_m.Mock}
}

// CreateUser provides a mock function with given fields: ctx, username, password
func (_m *UserRepository) CreateUser(ctx context.Context, username string, password string) (*model.User, error) {
	ret := _m.Called(ctx, username, password)

	if len(ret) == 0 {
		panic("no return value specified for CreateUser")
	}

	var r0 *model.User
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) (*model.User, error)); ok {
		return rf(ctx, username, password)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string) *model.User); ok {
		r0 = rf(ctx, username, password)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.User)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(ctx, username, password)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UserRepository_CreateUser_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateUser'
type UserRepository_CreateUser_Call struct {
	*mock.Call
}

// CreateUser is a helper method to define mock.On call
//   - ctx context.Context
//   - username string
//   - password string
func (_e *UserRepository_Expecter) CreateUser(ctx interface{}, username interface{}, password interface{}) *UserRepository_CreateUser_Call {
	return &UserRepository_CreateUser_Call{Call: _e.mock.On("CreateUser", ctx, username, password)}
}

func (_c *UserRepository_CreateUser_Call) Run(run func(ctx context.Context, username string, password string)) *UserRepository_CreateUser_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *UserRepository_CreateUser_Call) Return(_a0 *model.User, _a1 error) *UserRepository_CreateUser_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *UserRepository_CreateUser_Call) RunAndReturn(run func(context.Context, string, string) (*model.User, error)) *UserRepository_CreateUser_Call {
	_c.Call.Return(run)
	return _c
}

// GetUserByID provides a mock function with given fields: ctx, id
func (_m *UserRepository) GetUserByID(ctx context.Context, id int32) (*model.User, error) {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for GetUserByID")
	}

	var r0 *model.User
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int32) (*model.User, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int32) *model.User); ok {
		r0 = rf(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.User)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int32) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UserRepository_GetUserByID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetUserByID'
type UserRepository_GetUserByID_Call struct {
	*mock.Call
}

// GetUserByID is a helper method to define mock.On call
//   - ctx context.Context
//   - id int32
func (_e *UserRepository_Expecter) GetUserByID(ctx interface{}, id interface{}) *UserRepository_GetUserByID_Call {
	return &UserRepository_GetUserByID_Call{Call: _e.mock.On("GetUserByID", ctx, id)}
}

func (_c *UserRepository_GetUserByID_Call) Run(run func(ctx context.Context, id int32)) *UserRepository_GetUserByID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int32))
	})
	return _c
}

func (_c *UserRepository_GetUserByID_Call) Return(_a0 *model.User, _a1 error) *UserRepository_GetUserByID_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *UserRepository_GetUserByID_Call) RunAndReturn(run func(context.Context, int32) (*model.User, error)) *UserRepository_GetUserByID_Call {
	_c.Call.Return(run)
	return _c
}

// GetUserByUsernameAndPassword provides a mock function with given fields: ctx, username, password
func (_m *UserRepository) GetUserByUsernameAndPassword(ctx context.Context, username string, password string) (*model.User, error) {
	ret := _m.Called(ctx, username, password)

	if len(ret) == 0 {
		panic("no return value specified for GetUserByUsernameAndPassword")
	}

	var r0 *model.User
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) (*model.User, error)); ok {
		return rf(ctx, username, password)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string) *model.User); ok {
		r0 = rf(ctx, username, password)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.User)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(ctx, username, password)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UserRepository_GetUserByUsernameAndPassword_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetUserByUsernameAndPassword'
type UserRepository_GetUserByUsernameAndPassword_Call struct {
	*mock.Call
}

// GetUserByUsernameAndPassword is a helper method to define mock.On call
//   - ctx context.Context
//   - username string
//   - password string
func (_e *UserRepository_Expecter) GetUserByUsernameAndPassword(ctx interface{}, username interface{}, password interface{}) *UserRepository_GetUserByUsernameAndPassword_Call {
	return &UserRepository_GetUserByUsernameAndPassword_Call{Call: _e.mock.On("GetUserByUsernameAndPassword", ctx, username, password)}
}

func (_c *UserRepository_GetUserByUsernameAndPassword_Call) Run(run func(ctx context.Context, username string, password string)) *UserRepository_GetUserByUsernameAndPassword_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *UserRepository_GetUserByUsernameAndPassword_Call) Return(_a0 *model.User, _a1 error) *UserRepository_GetUserByUsernameAndPassword_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *UserRepository_GetUserByUsernameAndPassword_Call) RunAndReturn(run func(context.Context, string, string) (*model.User, error)) *UserRepository_GetUserByUsernameAndPassword_Call {
	_c.Call.Return(run)
	return _c
}

// NewUserRepository creates a new instance of UserRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewUserRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *UserRepository {
	mock := &UserRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
