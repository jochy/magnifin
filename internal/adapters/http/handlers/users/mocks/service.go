// Code generated by mockery v2.42.1. DO NOT EDIT.

package mocks

import (
	context "context"
	model "magnifin/internal/app/model"

	mock "github.com/stretchr/testify/mock"
)

// Service is an autogenerated mock type for the Service type
type Service struct {
	mock.Mock
}

type Service_Expecter struct {
	mock *mock.Mock
}

func (_m *Service) EXPECT() *Service_Expecter {
	return &Service_Expecter{mock: &_m.Mock}
}

// Create provides a mock function with given fields: ctx, username, password
func (_m *Service) Create(ctx context.Context, username string, password string) (*model.User, error) {
	ret := _m.Called(ctx, username, password)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 *model.User
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) (*model.User, error)); ok {
		return rf(ctx, username, password)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string) *model.User); ok {
		r0 = rf(ctx, username, password)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.User)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(ctx, username, password)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Service_Create_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Create'
type Service_Create_Call struct {
	*mock.Call
}

// Create is a helper method to define mock.On call
//   - ctx context.Context
//   - username string
//   - password string
func (_e *Service_Expecter) Create(ctx interface{}, username interface{}, password interface{}) *Service_Create_Call {
	return &Service_Create_Call{Call: _e.mock.On("Create", ctx, username, password)}
}

func (_c *Service_Create_Call) Run(run func(ctx context.Context, username string, password string)) *Service_Create_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *Service_Create_Call) Return(_a0 *model.User, _a1 error) *Service_Create_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Service_Create_Call) RunAndReturn(run func(context.Context, string, string) (*model.User, error)) *Service_Create_Call {
	_c.Call.Return(run)
	return _c
}

// GenerateJWT provides a mock function with given fields: ctx, user
func (_m *Service) GenerateJWT(ctx context.Context, user *model.User) (string, error) {
	ret := _m.Called(ctx, user)

	if len(ret) == 0 {
		panic("no return value specified for GenerateJWT")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *model.User) (string, error)); ok {
		return rf(ctx, user)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *model.User) string); ok {
		r0 = rf(ctx, user)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(context.Context, *model.User) error); ok {
		r1 = rf(ctx, user)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Service_GenerateJWT_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GenerateJWT'
type Service_GenerateJWT_Call struct {
	*mock.Call
}

// GenerateJWT is a helper method to define mock.On call
//   - ctx context.Context
//   - user *model.User
func (_e *Service_Expecter) GenerateJWT(ctx interface{}, user interface{}) *Service_GenerateJWT_Call {
	return &Service_GenerateJWT_Call{Call: _e.mock.On("GenerateJWT", ctx, user)}
}

func (_c *Service_GenerateJWT_Call) Run(run func(ctx context.Context, user *model.User)) *Service_GenerateJWT_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*model.User))
	})
	return _c
}

func (_c *Service_GenerateJWT_Call) Return(_a0 string, _a1 error) *Service_GenerateJWT_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Service_GenerateJWT_Call) RunAndReturn(run func(context.Context, *model.User) (string, error)) *Service_GenerateJWT_Call {
	_c.Call.Return(run)
	return _c
}

// Login provides a mock function with given fields: ctx, username, password
func (_m *Service) Login(ctx context.Context, username string, password string) (*model.User, error) {
	ret := _m.Called(ctx, username, password)

	if len(ret) == 0 {
		panic("no return value specified for Login")
	}

	var r0 *model.User
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) (*model.User, error)); ok {
		return rf(ctx, username, password)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string) *model.User); ok {
		r0 = rf(ctx, username, password)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.User)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(ctx, username, password)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Service_Login_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Login'
type Service_Login_Call struct {
	*mock.Call
}

// Login is a helper method to define mock.On call
//   - ctx context.Context
//   - username string
//   - password string
func (_e *Service_Expecter) Login(ctx interface{}, username interface{}, password interface{}) *Service_Login_Call {
	return &Service_Login_Call{Call: _e.mock.On("Login", ctx, username, password)}
}

func (_c *Service_Login_Call) Run(run func(ctx context.Context, username string, password string)) *Service_Login_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *Service_Login_Call) Return(_a0 *model.User, _a1 error) *Service_Login_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Service_Login_Call) RunAndReturn(run func(context.Context, string, string) (*model.User, error)) *Service_Login_Call {
	_c.Call.Return(run)
	return _c
}

// NewService creates a new instance of Service. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewService(t interface {
	mock.TestingT
	Cleanup(func())
}) *Service {
	mock := &Service{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
